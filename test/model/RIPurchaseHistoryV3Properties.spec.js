/**
 * Enterprise Reporting v3 APIs (preview)
 * The Reporting APIs enable Enterprise Azure customers to programmatically pull consumption and billing data into preferred data analysis tools. Generate API Key on Enterprise portal and follow the tutorial under Help - Reporting APIs. The first section under this help article explains how to generate\\retrieve the API key for the specified enrollment. <a href=\"https://docs.microsoft.com/en-us/azure/billing/billing-enterprise-api\" data-linktype=\"external\">Billing Enterprise API official documentation</a>
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnterpriseReportingV3ApIsPreview);
  }
}(this, function(expect, EnterpriseReportingV3ApIsPreview) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RIPurchaseHistoryV3Properties', function() {
    it('should create an instance of RIPurchaseHistoryV3Properties', function() {
      // uncomment below and update the code to test RIPurchaseHistoryV3Properties
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be.a(EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties);
    });

    it('should have the property purchasingEnrollment (base name: "purchasingEnrollment")', function() {
      // uncomment below and update the code to test the property purchasingEnrollment
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property armSkuName (base name: "armSkuName")', function() {
      // uncomment below and update the code to test the property armSkuName
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property term (base name: "term")', function() {
      // uncomment below and update the code to test the property term
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property purchasingSubscriptionGuid (base name: "purchasingSubscriptionGuid")', function() {
      // uncomment below and update the code to test the property purchasingSubscriptionGuid
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property purchasingSubscriptionName (base name: "purchasingSubscriptionName")', function() {
      // uncomment below and update the code to test the property purchasingSubscriptionName
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property accountName (base name: "accountName")', function() {
      // uncomment below and update the code to test the property accountName
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property accountOwnerEmail (base name: "accountOwnerEmail")', function() {
      // uncomment below and update the code to test the property accountOwnerEmail
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property departmentName (base name: "departmentName")', function() {
      // uncomment below and update the code to test the property departmentName
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property costCenter (base name: "costCenter")', function() {
      // uncomment below and update the code to test the property costCenter
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property currentEnrollment (base name: "currentEnrollment")', function() {
      // uncomment below and update the code to test the property currentEnrollment
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property eventDate (base name: "eventDate")', function() {
      // uncomment below and update the code to test the property eventDate
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property reservationOrderId (base name: "reservationOrderId")', function() {
      // uncomment below and update the code to test the property reservationOrderId
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property eventType (base name: "eventType")', function() {
      // uncomment below and update the code to test the property eventType
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

    it('should have the property reservationOrderName (base name: "reservationOrderName")', function() {
      // uncomment below and update the code to test the property reservationOrderName
      //var instane = new EnterpriseReportingV3ApIsPreview.RIPurchaseHistoryV3Properties();
      //expect(instance).to.be();
    });

  });

}));
