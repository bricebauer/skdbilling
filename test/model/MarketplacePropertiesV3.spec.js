/**
 * Enterprise Reporting v3 APIs (preview)
 * The Reporting APIs enable Enterprise Azure customers to programmatically pull consumption and billing data into preferred data analysis tools. Generate API Key on Enterprise portal and follow the tutorial under Help - Reporting APIs. The first section under this help article explains how to generate\\retrieve the API key for the specified enrollment. <a href=\"https://docs.microsoft.com/en-us/azure/billing/billing-enterprise-api\" data-linktype=\"external\">Billing Enterprise API official documentation</a>
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnterpriseReportingV3ApIsPreview);
  }
}(this, function(expect, EnterpriseReportingV3ApIsPreview) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MarketplacePropertiesV3', function() {
    it('should create an instance of MarketplacePropertiesV3', function() {
      // uncomment below and update the code to test MarketplacePropertiesV3
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be.a(EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionGuid (base name: "subscriptionGuid")', function() {
      // uncomment below and update the code to test the property subscriptionGuid
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionName (base name: "subscriptionName")', function() {
      // uncomment below and update the code to test the property subscriptionName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property meterId (base name: "meterId")', function() {
      // uncomment below and update the code to test the property meterId
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property usageStartDate (base name: "usageStartDate")', function() {
      // uncomment below and update the code to test the property usageStartDate
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property usageEndDate (base name: "usageEndDate")', function() {
      // uncomment below and update the code to test the property usageEndDate
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property offerName (base name: "offerName")', function() {
      // uncomment below and update the code to test the property offerName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property resourceGroup (base name: "resourceGroup")', function() {
      // uncomment below and update the code to test the property resourceGroup
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "instanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property additionalInfo (base name: "additionalInfo")', function() {
      // uncomment below and update the code to test the property additionalInfo
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property orderNumber (base name: "orderNumber")', function() {
      // uncomment below and update the code to test the property orderNumber
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property unitOfMeasure (base name: "unitOfMeasure")', function() {
      // uncomment below and update the code to test the property unitOfMeasure
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property costCenter (base name: "costCenter")', function() {
      // uncomment below and update the code to test the property costCenter
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property accountName (base name: "accountName")', function() {
      // uncomment below and update the code to test the property accountName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property accountOwnerId (base name: "accountOwnerId")', function() {
      // uncomment below and update the code to test the property accountOwnerId
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property departmentId (base name: "departmentId")', function() {
      // uncomment below and update the code to test the property departmentId
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property departmentName (base name: "departmentName")', function() {
      // uncomment below and update the code to test the property departmentName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property publisherName (base name: "publisherName")', function() {
      // uncomment below and update the code to test the property publisherName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property planName (base name: "planName")', function() {
      // uncomment below and update the code to test the property planName
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property consumedQuantity (base name: "consumedQuantity")', function() {
      // uncomment below and update the code to test the property consumedQuantity
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property resourceRate (base name: "resourceRate")', function() {
      // uncomment below and update the code to test the property resourceRate
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property extendedCost (base name: "extendedCost")', function() {
      // uncomment below and update the code to test the property extendedCost
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

    it('should have the property isRecurringCharge (base name: "isRecurringCharge")', function() {
      // uncomment below and update the code to test the property isRecurringCharge
      //var instane = new EnterpriseReportingV3ApIsPreview.MarketplacePropertiesV3();
      //expect(instance).to.be();
    });

  });

}));
