/**
 * Enterprise Reporting v3 APIs (preview)
 * The Reporting APIs enable Enterprise Azure customers to programmatically pull consumption and billing data into preferred data analysis tools. Generate API Key on Enterprise portal and follow the tutorial under Help - Reporting APIs. The first section under this help article explains how to generate\\retrieve the API key for the specified enrollment. <a href=\"https://docs.microsoft.com/en-us/azure/billing/billing-enterprise-api\" data-linktype=\"external\">Billing Enterprise API official documentation</a>
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnterpriseReportingV3ApIsPreview);
  }
}(this, function(expect, EnterpriseReportingV3ApIsPreview) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PriceSheetV3', function() {
    it('should create an instance of PriceSheetV3', function() {
      // uncomment below and update the code to test PriceSheetV3
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be.a(EnterpriseReportingV3ApIsPreview.PriceSheetV3);
    });

    it('should have the property offerId (base name: "offerId")', function() {
      // uncomment below and update the code to test the property offerId
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property billingPeriodId (base name: "billingPeriodId")', function() {
      // uncomment below and update the code to test the property billingPeriodId
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property meterId (base name: "meterId")', function() {
      // uncomment below and update the code to test the property meterId
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property meterName (base name: "meterName")', function() {
      // uncomment below and update the code to test the property meterName
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property unitOfMeasure (base name: "unitOfMeasure")', function() {
      // uncomment below and update the code to test the property unitOfMeasure
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property includedQuantity (base name: "includedQuantity")', function() {
      // uncomment below and update the code to test the property includedQuantity
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property partNumber (base name: "partNumber")', function() {
      // uncomment below and update the code to test the property partNumber
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property unitPrice (base name: "unitPrice")', function() {
      // uncomment below and update the code to test the property unitPrice
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instane = new EnterpriseReportingV3ApIsPreview.PriceSheetV3();
      //expect(instance).to.be();
    });

  });

}));
